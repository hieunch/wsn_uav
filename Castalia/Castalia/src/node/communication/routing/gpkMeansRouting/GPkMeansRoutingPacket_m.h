//
// Generated file, do not edit! Created by nedtool 4.6 from src/node/communication/routing/gpkMeansRouting/GPkMeansRoutingPacket.msg.
//

#ifndef _GPKMEANSROUTINGPACKET_M_H_
#define _GPKMEANSROUTINGPACKET_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "RoutingPacket_m.h"
#include "GeoMathHelper.h"
typedef std::vector<int> IntVector;
// }}

/**
 * Enum generated from <tt>src/node/communication/routing/gpkMeansRouting/GPkMeansRoutingPacket.msg:30</tt> by nedtool.
 * <pre>
 * enum GPkMeansRoutingPacket_Type
 * {
 * 
 *     GP_ROUTING_CONTROL_PACKET = 1;
 *     GP_ROUTING_DATA_PACKET = 2;
 *     GP_ROUTING_JOIN_PACKET = 3;
 *     GP_ROUTING_ADV_PACKET = 4;
 * }
 * </pre>
 */
enum GPkMeansRoutingPacket_Type {
    GP_ROUTING_CONTROL_PACKET = 1,
    GP_ROUTING_DATA_PACKET = 2,
    GP_ROUTING_JOIN_PACKET = 3,
    GP_ROUTING_ADV_PACKET = 4
};

/**
 * Class generated from <tt>src/node/communication/routing/gpkMeansRouting/GPkMeansRoutingPacket.msg:38</tt> by nedtool.
 * <pre>
 * packet GPkMeansRoutingPacket extends RoutingPacket
 * {
 *     int GPkMeansRoutingPacketKind @enum(GPkMeansRoutingPacket_Type);
 *     int sourceId;
 *     int schedule[];
 *     double remainingEnergy;
 *     IntVector isCH;
 *     IntVector nextCH;
 *     IntVector trace;
 * }
 * </pre>
 */
class GPkMeansRoutingPacket : public ::RoutingPacket
{
  protected:
    int GPkMeansRoutingPacketKind_var;
    int sourceId_var;
    int *schedule_var; // array ptr
    unsigned int schedule_arraysize;
    double remainingEnergy_var;
    IntVector isCH_var;
    IntVector nextCH_var;
    IntVector trace_var;

  private:
    void copy(const GPkMeansRoutingPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const GPkMeansRoutingPacket&);

  public:
    GPkMeansRoutingPacket(const char *name=NULL, int kind=0);
    GPkMeansRoutingPacket(const GPkMeansRoutingPacket& other);
    virtual ~GPkMeansRoutingPacket();
    GPkMeansRoutingPacket& operator=(const GPkMeansRoutingPacket& other);
    virtual GPkMeansRoutingPacket *dup() const {return new GPkMeansRoutingPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getGPkMeansRoutingPacketKind() const;
    virtual void setGPkMeansRoutingPacketKind(int GPkMeansRoutingPacketKind);
    virtual int getSourceId() const;
    virtual void setSourceId(int sourceId);
    virtual void setScheduleArraySize(unsigned int size);
    virtual unsigned int getScheduleArraySize() const;
    virtual int getSchedule(unsigned int k) const;
    virtual void setSchedule(unsigned int k, int schedule);
    virtual double getRemainingEnergy() const;
    virtual void setRemainingEnergy(double remainingEnergy);
    virtual IntVector& getIsCH();
    virtual const IntVector& getIsCH() const {return const_cast<GPkMeansRoutingPacket*>(this)->getIsCH();}
    virtual void setIsCH(const IntVector& isCH);
    virtual IntVector& getNextCH();
    virtual const IntVector& getNextCH() const {return const_cast<GPkMeansRoutingPacket*>(this)->getNextCH();}
    virtual void setNextCH(const IntVector& nextCH);
    virtual IntVector& getTrace();
    virtual const IntVector& getTrace() const {return const_cast<GPkMeansRoutingPacket*>(this)->getTrace();}
    virtual void setTrace(const IntVector& trace);
};

inline void doPacking(cCommBuffer *b, GPkMeansRoutingPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, GPkMeansRoutingPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef _GPKMEANSROUTINGPACKET_M_H_

